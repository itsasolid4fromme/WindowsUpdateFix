param ([switch]$Elevated)
function Check-Admin
{
	$currentUser = New-Object Security.Principal.WindowsPrincipal $([Security.Principal.WindowsIdentity]::GetCurrent())
	$currentUser.IsInRole([Security.Principal.WindowsBuiltinRole]::Administrator)
}
if ((Check-Admin) -eq $false)
{
	if ($elevated)
	{
		# could not elevate, quit
	}
	else
	{
		Start-Process powershell.exe -Verb RunAs -ArgumentList ('-noprofile -noexit -file "{0}" -elevated' -f ($myinvocation.MyCommand.Definition))
	}
	exit
}
#Imports BitsTrasfer to show progress bars
Import-Module BitsTransfer

#Imports BitsTrasfer to show progress bars
Import-Module BitsTransfer

$wsh = New-Object -ComObject Wscript.Shell

$wsh.Popup("This script will fix Windows Updates and force install required updates provided by SCCM")

$ButtonType = 4
$Timeout = 60
$Confirmation = New-Object -ComObject wscript.shell
$ConfirmationAnswer = $Confirmation.popup("Does Justin Make Awesome Scripts?", $Timeout, "Make you're choice", $ButtonType)
If ($ConfirmationAnswer -eq 6)
{
	$Confirmation.popup("Good Choice")
}
else
{
	$Confirmation.popup("Rude.")
}

function FreeDiskSpace() {
    $OS = Get-WMiobject -Class Win32_operatingsystem
    $Disk = Get-WMIObject Win32_Logicaldisk -filter "deviceid='$($os.systemdrive)'" |
    Select PSComputername,DeviceID,
    @{Name="FreeGB";Expression={[math]::Round($_.Freespace/1GB,2)}}
    return $Disk.FreeGB    
}

function CheckWUS() {
    $s = Get-Service wuauserv
    if ($s.Status -eq "Running") {
        return 0
    } else {
        return 1
    }
}
function StopWUS() {
     Stop-Service wuauserv -Force
}

function StartWUS() {
    Start-Service wuauserv
}

function WUSRunning() {
    Write-Host "Windows Update Service is Running" -ForegroundColor Red
	Write-Host "Stopping Windows Update Service." -ForegroundColor Red
	for ($i = 0; $i -le 100; $i++) { Write-Progress -Activity "Stopping Windows Update Service" -Id 1 -Status "$i% Complete:" -PercentComplete $i; }

    # Stopping Windows Update Service and check again if it is stopped
    StopWUS
    if (CheckWUS) {
        WUSStopped
    } else {
        Write-Host "Can't stop Windows Update Service..." -ForegroundColor Red
        exit 1
    }
    Write-Host "Starting Windows Update Service..." -ForegroundColor Red
	
	# Starting the Windows Update Service again
	for ($i = 0; $i -le 100; $i++) { Write-Progress -Activity "Starting the Windows Update Service again" -Id 1 -Status "$i% Complete:" -PercentComplete $i; }
	StartWUS
}
function WUSStopped() {
    Write-Host "Windows Update Service is Stopped..." -ForegroundColor Red
	
	# Getting free disk space before the cleaning actions
	for ($i = 0; $i -le 100; $i++) { Write-Progress -Activity "Getting free disk space before the cleaning actions" -Id 1 -Status "$i% Complete:" -PercentComplete $i; }
	Write-Host " Free Disk Space before: " -ForegroundColor Red -NoNewline
    $Before = FreeDiskSpace
    Write-Host "$Before GB"
    
    Write-Host " Cleaning Files..." -ForegroundColor Red -NoNewline
	Get-ChildItem -LiteralPath $env:windir\SoftwareDistribution\Download\ -Recurse | Remove-Item -Force -Recurse -ErrorAction SilentlyContinue
	for ($i = 0; $i -le 100; $i++) { Write-Progress -Activity "Cleaning Files" -Id 1 -Status "$i% Complete:" -PercentComplete $i; }
	Write-Host "Done..." -ForegroundColor Green
	
	# Getting free disk space after the cleaning actions
	for ($i = 0; $i -le 100; $i++) { Write-Progress -Activity "Getting free disk space after the cleaning actions" -Id 1 -Status "$i% Complete:" -PercentComplete $i; }
	Write-Host " Free Disk Space after: " -ForegroundColor Red -NoNewline
    $After = FreeDiskSpace
    Write-Host "$After GB"
	
	# Calculating the free disk space difference
	for ($i = 0; $i -le 100; $i++) { Write-Progress -Activity "Calculating the free disk space difference" -Id 1 -Status "$i% Complete:" -PercentComplete $i; }
	Write-Host " Cleaned: " -ForegroundColor Red -NoNewline
    $Cleaned = $After - $Before
    Write-Host "$Cleaned GB"
}

# Program
if (CheckWUS) {
    WUSStopped
} else {
    WUSRunning
}
Write-Host "Done..." -ForegroundColor Green

#Sets Windows Update Service to automatic
for ($i = 0; $i -le 100; $i++) { Write-Progress -Activity "Setting Windows Update Service To Automatic" -Id 1 -Status "$i% Complete:" -PercentComplete $i; }
Write-Host "Setting Service to Automatic Start-up" -ForegroundColor Red
set-service wuauserv -StartupType Automatic
Write-Host "Done..." -ForegroundColor Green


exit 0
